#!/bin/bash

set -e
shopt -s extglob

API=https://api.trello.com/1
declare -A param


info()
{
	echo "${0##*/}: $*" >&2
}

warnx()
{
	echo "${0##*/}: $*" >&2
}

debug()
{
	if [ "$DEBUG" ]
	then
		warnx "$*"
	fi
}

errx()
{
	warnx "$@"
	exit -1
}

match()
{
	local pattern=$2
	if [ "${pattern:0:1}" = '^' ]
	then
		pattern=${pattern:1}
	else
		pattern=".*$pattern"
	fi
	expr "$1" : "$pattern" >/dev/null
}

apicall()
{
	local endpoint param method urlparams
	declare -a curlArgs
	
	if match "$1" '[A-Z]'
	then
		# if first argment is UPPER CASE, take it as call method
		method=$1
		shift
	fi
	
	# first argument (after optional method name) is the endpoint path
	endpoint=$1
	shift
	
	if [ -z "$method" ]
	then
		# default method is GET
		method=GET
		
		if match "$endpoint" '^/\?[^/]\+$'
		then
			# one-componenet endpoints always get POSTed (unless method explicitely set)
			method=POST
		fi
	fi
	
	for param in "$@"
	do
		if [ "$method" = GET ]
		then
			urlparams="$urlparams${urlparams:+&}$param"
		else
			curlArgs+=(-d "$param")
		fi
	done
	
	curlArgs+=(-X "$method")
	
	debug "Calling /$endpoint?$urlparams ${curlArgs[@]}"
	curl -sS $API/$endpoint?"key=$TRELLO_KEY&token=$TRELLO_TOKEN&$urlparams" "${curlArgs[@]}"
}


validate_id()
{
	if [ -z "$2" -o "$2" = null ]
	then
		errx Could not get $1 Id
	fi
	echo "$2"
}

_get_board_id()
{
	apicall members/me/boards | jq -r ".[] | select(.name|contains(\"$1\")) | .id" | head -n1
}

get_board_id()
{
	validate_id Board `_get_board_id "$@"`
}

_get_list_id()
{
	apicall boards/$1/lists | jq -r ".[] | select(.name|contains(\"$2\")) | .id" | head -n1
}

get_list_id()
{
	validate_id List `_get_list_id "$@"`
}

_mk_label()
{
	apicall labels idBoard="$1" name="$2" color="$3" | jq -r '.id'
}

mk_label()
{
	validate_id Label `_mk_label "$@"`
}

_get_label_id()
{
	local condition name color=null id
	if match "$2" /
	then
		name=${2%/*}
		color=${2#*/}
		condition=".name == \"$name\" and .color == \"$color\""
	else
		name=$2
		condition=".name == \"$2\""
	fi
	apicall boards/$1/labels | jq -r ".[] | select($condition) | .id"
}

get_label_id()
{
	validate_id Label `_get_label_id "$@"`
}

mkget_label_id()
{
	id=`get_label_id "$@"`
	if [ -z "$id" ]
	then
		id=`mk_label "$1" "$name" "$color"`
	fi
	echo $id
}

_get_card_id()
{
	local boardid=$1 condition=$2
	apicall boards/$boardid/cards | jq -r ".[] | select($condition) | .id"
	#FIXME multi response
}

get_card_id()
{
	validate_id Card `_get_card_id "$@"`
}

get_member_id()
{
	local memberid urls
	for memberid in `apicall batch/ urls=/members/me/boards,/members/me/organizations |\
	  jq -r '.[]."200"[].memberships[].idMember' |\
	  sort -u`
	do
		urls=$urls${urls:+,}/members/$memberid
	done
	apicall batch/ urls=$urls |\
	  jq -r ".[].\"200\" | select(.fullName == \"$1\" or .username == \"$1\") | .id"
	#FIXME multi response
}


report_not_null()
{
	if [ -n "$1" -a "$1" != null ]
	then
		info "$2"
	else
		errx "$3"
	fi
}

report_true()
{
	if [ "$1" = true ]
	then
		info "$2"
	else
		errx "$3"
	fi
}

_list_boards()
{
	apicall members/me/boards/ filter=open |\
	jq -r "sort_by(.dateLastActivity) | reverse | .[] | [.id, .dateLastActivity, .name] | join(\" \")"
}



for opt in "$@"
do
	case "$opt" in
	help|--help|-h|-\?)
		echo \
'Actions:
  add-card
  archive-card
  list-boards
  list-cards
  show-card
  show-attachments
Options:
  --id [id]
  --title, --name [text]
  --desc [text]
  --position [top | bottom | <n>]
  --due [local date time]
  --board [board name]
  --list [list name]
  --members [full name | user name]
  --label <label>[/color]
Environments:
  DEBUG
  TRELLO_KEY
  TRELLO_TOKEN
  TRELLO_BOARD_ID'
  		exit -1
	;;
	esac
done


if [ -z "$TRELLO_KEY" ]
then
	errx Environment TRELLO_KEY is not set. Go to "https://trello.com/app-key" to get one.
fi
if [ -z "$TRELLO_TOKEN" ]
then
	errx Environment TRELLO_TOKEN is not set. Go to "$API/authorize?expiration=never&name=Trello+CLI+running+on+$(hostname)&scope=read,write&response_type=token&key=$TRELLO_KEY" to get one.
fi




# Process cli arguments


action=''
boardid=${TRELLO_BOARD_ID:-}
return_type=''


while [ $# -ge 1 ]
do
	opt=$1
	shift
	
	case "$opt" in
	add-card|archive-card|list-boards|list-cards|show-card|show-attachments|show-files|list)
		action=$opt
		if [ "$action" = archive-card ]; then param[closed]=true; fi
		if [ "$action" = show-files ]; then action=show-attachments; fi
		;;
	-*)
		if [ $# = 0 ]
		then
			errx "Missing value for '$opt'"
		fi
		val=$1
		shift
		
		case "$opt" in
		--id)
			param[id]=$val
			;;
		--title|--name)
			case "$action" in
			archive-card|show-attachments)
				param[id]=`get_card_id "$boardid" ".name == \"$val\""`
				;;
			*)
				param[name]=$val
				;;
			esac
			;;
		--desc|--description)
			param[desc]=$val
			;;
		--pos|--position)
			case "$val" in
			top|bottom|+([0-9]))
				param[pos]=$val
				;;
			*)
				errx "Invalid position '$val', choose 'top', 'bottom', or an integer"
				;;
			esac
			;;
		--due)
			# Convert date-time phrase given on cli from local timezone to UTC.
			fmt=%Y-%m-%dT%H:%M:%SZ
			date=`TZ=UTC date +"$fmt" -d "$val $(date +%z)" || true`
			if [ -z "$date" ]
			then
				# try without timezone spec
				warnx Computing date without specifying timezone
				date=`TZ=UTC date +"$fmt" -d "$val"`
			fi
			param[due]=$date
			;;
		--board)
			boardid=`get_board_id "$val"`
			;;
		--list)
			param[idList]=`get_list_id "$boardid" "$val"`
			;;
		--member)
			param[idMembers]=${param[idMembers]}${param[idMembers]:+,}`get_member_id "$val"`
			;;
		--label)
			param[idLabels]=${param[idLabels]}${param[idLabels]:+,}`mkget_label_id "$boardid" "$val"`
			;;
		*)
			errx "Invalid option '$opt'"
			;;
		esac
		;;
	*)
		errx "Invalid option '$opt'"
		;;
	esac
done



# Verify mandatory parameters for each action

case "$action" in
	add-card|list-cards)
		if [ -z "$boardid" ]
		then
			warnx Missing --board BoardName, choose one:
			apicall members/me/boards | jq -r '.[] | .name' | sort >&2
			exit 10
		fi
		if [ -z "${param[idList]}" ]
		then
			warnx Missing --list ListName, choose one:
			apicall boards/$boardid/lists | jq -r '.[] | .name' | sort >&2
			exit 11
		fi
		;;
esac



# Assemble parameters

params=()
for pkey in "${!param[@]}"
do
	params+=("$pkey=${param[$pkey]}")
done


# Perform action

case "$action" in
	add-card)
		id=`apicall cards "${params[@]}" | jq -r '.id'`
		report_not_null "$id" "New card created: $id" "Failed to create card"
		;;
	archive-card)
		resp=`apicall PUT cards/${param[id]}/closed value=true | jq -r .closed`
		report_true "$resp" "Card archived" "Failed to archive card"
		;;
	list-boards)
		_list_boards
		;;
	list)
		_list_boards |\
		while read -r boardid datetime boardname
		do
			echo "$boardname"
			apicall boards/$boardid/lists filter=open |\
				jq -r '.[] | .name' |\
				sed -e 's/^/	/'
		done
		;;
	list-cards)
		apicall lists/${param[idList]}/cards |\
			jq -r '[
				sort_by(.due)|reverse|.[]|[
					"[34;1m" + .name + " [30;1m" + .url + "[m",
					if .due then "Due: " + .due else null end,
					if .labels[] then "Labels: " + ([.labels[].name] | join(" ")) else null end,
					if .desc and .desc!="" then "Description: \n" + ([.desc | split("\n") | .[] | "  "+.] | join("\n")) else null end,
					""
				]|.[]|
				select(.)
			]|
			join("\n")'
		;;
	show-attachments)
		apicall cards/${param[id]}/attachments |\
			jq -r '.[] | ["- " + .name, "  " + .url, ""] | join("\n")'
		;;
	*)
		errx Action was not given.
		;;
esac

